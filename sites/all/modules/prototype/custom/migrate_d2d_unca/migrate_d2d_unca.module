<?php

/**
 * This is example code for a Drupal 6 to Drupal 7 migration. This won't actually
 * work without defining the referenced vocabularies, content types, and fields
 * on each side.
 */


/**
 * Implements hook_flush_caches().
 */
function migrate_d2d_unca_flush_caches() {
  migrate_d2d_unca_register_migrations();
}

/**
 * Register all D6->D7 migrations.
 */
function migrate_d2d_unca_register_migrations() {
  /**
   * Each migration being registered takes an array of arguments, some required
   * and some optional. Start with the common arguments required by all - the
   * source_connection (connection key, set up in settings.php, pointing to
   * the Drupal 6 database) and source_version (major version of Drupal).
   */
  $common_arguments = array(
    'source_connection' => 'legacy',
    'source_version' => 6,
  );



  // 
  // +  +  +  +  USER ROLES  +  +  +  +  
  // 
  // Src: 
  // 1  anonymous user
  // 2 authenticated user
  // 3 content manager
  // 4 administrator
  // 
  // Target:
  // 1  anonymous user  
  // 2 authenticated user  
  // 3 administrator 
  // 
  // Migration:
  // Create target role: 4 content manager
  // Where src.rid = 3 (cont. mgr) or 5 (editor), convert to 4 (cont. mgr)
  // Where src.rid = 4 (admin), convert to 3 (administrator)
  
  $role_arguments = $common_arguments + array(
    'machine_name' => 'UNCARole',
    'description' => t('Import Drupal 6 roles'),
    'role_mappings' => array(
      'author' => 'content manager',
      'content manager' => 'content manager',
      'administrator' => 'administrator',
    ),
  );
  $role_migration_class = 'UNCARoleMigration';
  // $role_migration_class = 'DrupalRole6Migration';
  Migration::registerMigration($role_migration_class, 
    $role_arguments['machine_name'], $role_arguments);



  // 
  // +  +  +  +  USERS: 'UNCAUser'  +  +  +  +  
  // 
  // Src: 
  // 1  anonymous user
  // 2 authenticated user
  // 3 content manager
  // 4 administrator
  // 
  // Target:
  // 1  anonymous user  
  // 2 authenticated user  
  // 3 administrator 
  // 
  // Migration:
  // Create target role: 4 content manager
  // Where src.rid = 3 (cont. mgr) or 5 (editor), convert to 4 (cont. mgr)
  // Where src.rid = 4 (admin), convert to 3 (administrator)
  //  

  // The description and the migration machine name are also required arguments,
  // which will be unique for each migration you register.
  $arguments = $common_arguments + array(
    'description' => t('Migration of users from Drupal 6'),
    'machine_name' => 'UNCAUser',
    'role_migration' => 'UNCARole',    
  );
  $user_migration_class = 'UNCAUserMigration';
  // $user_migration_class = 'DrupalUser6Migration';

  // We just use the migrate_d2d D6 migration class as-is.
  Migration::registerMigration($user_migration_class, $arguments['machine_name'],
                               $arguments);






  // 
  // +  +  +  +  TAXONOMY  +  +  +  +  
  // 

  // Vocabulary ids are not consistent on source dbs, so compile our mapping
  // dynamically
  extract(migrate_d2d_unca_get_vocab_mappings()); # $vocabs_map, $src_vocabs

  // For vocabulary migrations, source_vocabulary and destination_vocabulary are
  // required arguments. Note that in Drupal 6 vocabularies did not have machine
  // names, so we use the vocabulary ID to uniquely identify them.
  

    $vocabulary_arguments = array(
                // array(
                //   'description' => t('Migration of Profile Type terms from Drupal 6'),
                //   'machine_name' => 'profile_type',
                //   'source_vocabulary' => '2',  // D6 Vocabulary ID
                //   'destination_vocabulary' => 'Profile Type',
                // ),
      // array(
      //   'description' => t('Migration of Topics terms from Drupal 6'),
      //   'machine_name' => 'Topics',
      //   'source_vocabulary' => '2',  // D6 Vocabulary ID
      //   'destination_vocabulary' => 'topics',
      // ),
    );

    // $t = array();
    // drush_print_r($vocabs_map);
  // Normal vocabs, can be handled automatically
  foreach($vocabs_map as $vname => $vocab) {
    if(@$vocab['d6_vid']) {
      $vocabulary_arguments[] = array(
        'description' => 'Migration of ' . $vocab['d6_name'] . ' terms from Drupal 6',
        'machine_name' => 'Term_' . $vocab['mach_name'],
        'source_vocabulary' => $vocab['d6_vid'],  // D6 Vocabulary ID
        'destination_vocabulary' => $vocab['mach_name'],  // D7 vocabulary machine name
      );
    }
  }


  // Again, we're using the migrate_d2d class directly.
  // The soft dependency says that while we don't have to run the user migration
  // first, we want to make sure it's listed first so the vocubularies are
  // listed right ahead of the node migrations.
  $common_vocabulary_arguments = $common_arguments + array(
    // 'class_name' => 'DrupalTerm6Migration',
    'class_name' => 'UNCATermMigration',
    // 'soft_dependencies' => array('User'),
  );
  foreach ($vocabulary_arguments as $arguments) {
    $arguments += $common_vocabulary_arguments;
#drush_print_r(array($arguments['machine_name'] => $arguments));
    Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);
  }





  // // 
  // // +  +  +  +  NODE  +  +  +  +  
  // // 

  // // Node migrations - each has its own class derived from the migrate_d2d class,
  // // specifying its particular field mappings and transformations. source_type
  // // and destination_type are required arguments.
  // $node_arguments = array(
  //   array(
  //     'class_name' => 'UNCAImageMigration',
  //     'description' => t('Migration of image nodes from Drupal 6'),
  //     'machine_name' => 'Image',
  //     'source_type' => 'image',
  //     'destination_type' => 'image',
  //   ),
  //   array(
  //     'class_name' => 'UNCAArticleMigration',
  //     'description' => t('Migration of article nodes from Drupal 6'),
  //     'machine_name' => 'Article',
  //     'source_type' => 'my_article',
  //     'destination_type' => 'new_article',
  //     'dependencies' => array('Image', 'Countries', 'Topics'),
  //   ),
  // );
  // // Tell the node migrations where the users are coming from, so they can
  // // set up the dependency and resolve D6->D7 uids.
  // $common_node_arguments = $common_arguments + array(
  //   'user_migration' => 'User',
  // );
  // foreach ($node_arguments as $arguments) {
  //   $arguments = array_merge_recursive($arguments, $common_node_arguments);
  //   Migration::registerMigration($arguments['class_name'], $arguments['machine_name'],
  //                                $arguments);
  // }


}


/**
 * Implements hook_migrate_api().
 */
function migrate_d2d_unca_migrate_api() {
  $api = array(
    'api' => 2,
  );
  return $api;
}


function migrate_d2d_unca_get_vocab_mappings() {

  $vocabs_map = array(
    'course_catalogs' => array(
      'd7_name' => 'Course Catalog',
      'mach_name' => 'course_catalogs',
      'd6_name' => 'Catalogs'
    ),
    'course_days' => array(
      'd7_name' => 'Course Days',
      'mach_name' => 'course_days',
      'd6_name' => 'Days'
    ),
    'course_times' => array(
      'd7_name' => 'Course Times',
      'mach_name' => 'course_times',
      'd6_name' => 'Time'
    ),
    'course_topic' => array(
      'd7_name' => 'Course Topic',
      'mach_name' => 'course_topic',
      'd6_name' => 'Topics'
    ),
    'event_categories' => array(
      'd7_name' => 'Event Categories',
      'mach_name' => 'event_categories',
      'd6_name' => '', # special handling: SOME "News & Events Categories"
    ),
    'policy_owner' => array(
      'd7_name' => 'Policy Owner',
      'mach_name' => 'policy_owner',
      'd6_name' => 'Policy Owner'
    ),
    'policy_categories' => array(
      'd7_name' => 'Policy Categories',
      'mach_name' => 'policy_categories',
      'd6_name' => 'Policy Categories'
    ),
    'groups_policies_apply_to' => array(
      'd7_name' => 'Groups Policies Apply To',
      'mach_name' => 'groups_policies_apply_to',
      'd6_name' => 'Groups Policies Apply To'
    ),
    'responsible_office' => array(
      'd7_name' => 'Responsible Office',
      'mach_name' => 'responsible_office',
      'd6_name' => 'Responsible Office'
    ),
    'humanities_level' => array(
      'd7_name' => 'Humanities Level',
      'mach_name' => 'humanities_level',
      'd6_name' => 'Humanities Level'
    ),

    'news_categories' => array(
      'd7_name' => 'News Categories',
      'mach_name' => 'news_categories',
      'd6_name' => '', # special handling: all "News Articles" + SOME "News & Events Categories"
    ),
    // 'news_categories' => array(
    //   'd7_name' => 'News Categories',
    //   'mach_name' => 'news_categories',
    //   'd6_name' => 'News Articles'
    // ),

    'profile_type' => array(
      'd7_name' => 'Profile Type',
      'mach_name' => 'profile_types',
      'd6_name' => 'Profile Types'
    ),
    'program_type' => array(
      'd7_name' => 'Program Type',
      'mach_name' => 'program_type',
      'd6_name' => 'Program Type'
    ),
    'project_type' => array(
      'd7_name' => 'Project Type',
      'mach_name' => 'project_type',
      'd6_name' => 'Project Types'
    ),
    'region' => array(
      'd7_name' => 'Study Abroad Region',
      'mach_name' => 'region',
      'd6_name' => 'Region'
    ),
    'university_semester' => array(
      'd7_name' => 'University Semester',
      'mach_name' => 'university_semester',
      'd6_name' => 'Term'
    ),
    'location_type' => array(
      'd7_name' => 'Location Type',
      'mach_name' => 'location_type',
      'd6_name' => '', # special handling: multiple d6 names: Map Category, Map Categories
    ),
    'student_orgs' => array(
      'd7_name' => 'Student Organizations',
      'mach_name' => 'student_orgs',
      'd6_name' => 'Student Organizations'
    ),
    '__slideshows__' => array(
      'd7_name' => 'Slideshows',
      'mach_name' => 'see Migration notes',
      'd6_name' => ''
    ),

  );

  // Temporarily correct pending updates in features
  $vocabs_map['event_type'] = $vocabs_map['event_categories'];
  $vocabs_map['event_type']['mach_name'] = 'event_type';
  unset($vocabs_map['event_categories']);

  $vocabs_map['profile_types'] = $vocabs_map['profile_type'];
  $vocabs_map['profile_types']['mach_name'] = 'profile_types';
  unset($vocabs_map['profile_type']);


  // $vocabs_map['program_type']['mach_name'] = 'program_types';
  $vocabs_map['program_types'] = $vocabs_map['program_type'];
  $vocabs_map['program_types']['mach_name'] = 'program_types';
  unset($vocabs_map['program_type']);

  // $vocabs_map['university_semester']['mach_name'] = 'university_term';
  $vocabs_map['university_term'] = $vocabs_map['university_semester'];
  $vocabs_map['university_term']['mach_name'] = 'university_term';
  unset($vocabs_map['university_semester']);



  // Create map array for easy lookup
  $map_d6_name_to_mach_name = array(); 
  foreach($vocabs_map as $vocab) {
    switch ($vocab['d6_name']) {
      case 'News and Events Categories':
      case 'News Articles':
         // do nothing (these will be handled manually)
         break;
      default:
      $map_d6_name_to_mach_name[$vocab['d6_name']] = trim($vocab['mach_name']);
    }
    
  }
  // Add these manually
  $map_d6_name_to_mach_name['Map Categories'] = 'location_type';
  $map_d6_name_to_mach_name['Map Category'] = 'location_type';

  // load source site's vocabularies
  db_set_active('legacy');
  $result = db_query('SELECT vid, name from {vocabulary}'); //Your own queries on the external DB.

  $src_vocabs = array();
  foreach ($result as $record) {
    $src_vocabs[] = $record;
    if($mach_name = @$map_d6_name_to_mach_name[$record->name]) {
      $vocabs_map[$mach_name]['d6_name'] = $record->name;
      $vocabs_map[$mach_name]['d6_vid'] = $record->vid;
    } else {
      switch ($record->name) {
        case 'Map Categories':
        case 'Map Category':
          $vocabs_map['location_type']['d6_name'] = $record->name;
          $vocabs_map['location_type']['d6_vid'] = $record->vid;
          break;
      }
    }
  }; 
  // Re-set default db
  db_set_active();

  return compact('vocabs_map', 'src_vocabs');
}


/**
 * TEMP DEBUGGING FUNCTION
 * @return [type] [description]
 */
function migrate_d2d_unca__debug__print_migrations_data() {
  $q = "select * from migrate_status";
  $r = db_query($q);
  foreach($r as $row) {
    $row->arguments = unserialize($row->arguments);
    dpm($row, $row->machine_name);
  }

}

/**
 * TEMP DEBUGGING FUNCTION
 * @return [type] [description]
 */
function migrate_d2d_unca__debug__print_vocab_mappings() {
  $d = migrate_d2d_unca_get_vocab_mappings();
  dpm($d);

}
