<?php

/**
 * Implements hook_entity_info().
 */
function slideshow_entity_entity_info() {
  $return = array(
    'slideshow_entity' => array(
      'label' => t('Slideshow'),
      'entity class' => 'SlideshowEntity',
      'controller class' => 'SlideshowEntityController',
      'base table' => 'slideshow_entity',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'ssid',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'slideshow_entity_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'slideshow_entity',
      'access callback' => 'slideshow_entity_access',
    ),
  );
  $return['slideshow_entity_type'] = array(
    'label' => t('Slideshow Type'),
    'entity class' => 'SlideshowEntityType',
    'controller class' => 'SlideshowEntityTypeController',
    'base table' => 'slideshow_entity_type',
    'fieldable' => FALSE,
    'bundle of' => 'slideshow_entity',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'slideshow_entity',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/slideshow-types',
      'file' => 'slideshow_entity.admin.inc',
      'controller class' => 'SlideshowEntityTypeUIController',
    ),
    'access callback' => 'slideshow_entity_type_access',
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function slideshow_entity_entity_info_alter(&$entity_info) {
  foreach (slideshow_entity_types() as $type => $info) {
    $entity_info['slideshow_entity']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/slideshow-types/manage/%slideshow_entity_type',
        'real path' => 'admin/structure/slideshow-types/manage/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function slideshow_entity_menu() {
  $items = array();

  // admin/content tab
  $items['admin/content/slideshows'] = array(
    'title' => 'Slideshows',
    'description' => 'Slideshows tab for admin/content page',
    'page callback' => ' slideshow_entity_content_admin',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'user_access',
    'access arguments' => array('administer slideshow_entity entities'),
    'weight' => 1
  );

  $items['admin/content/slideshows'] = array(
    'title' => 'Slideshows',
    'description' => 'Slideshows tab for admin/content page',
    'page callback' => 'slideshow_entity_content_admin',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer slideshow_entity entities'),
    // 'tab_parent' => 'slideshow',
    // 'tab_root' => 'slideshow',
  );

  $items['slideshow/add'] = array(
    'title' => 'Add slideshow',
    'page callback' => 'slideshow_entity_admin_add_page',
    'access arguments' => array('administer slideshow_entity entities'),
    'file' => 'slideshow_entity.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'tab_parent' => 'slideshow',
    'tab_root' => 'slideshow',
  );

  $items['node/add/slideshow'] = array(
    'title' => 'Slideshow',
    'page callback' => 'slideshow_entity_admin_add_page',
    'access arguments' => array('administer slideshow_entity entities'),
    'file' => 'slideshow_entity.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'tab_parent' => 'slideshow',
    'tab_root' => 'slideshow',
  );

  $slideshow_entity_uri = 'slideshow/%slideshow_entity';
  $slideshow_entity_uri_argument_position = 1;

  $items[$slideshow_entity_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('slideshow_entity', $slideshow_entity_uri_argument_position),
    'page callback' => 'slideshow_entity_view',
    'page arguments' => array($slideshow_entity_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'slideshow_entity', $slideshow_entity_uri_argument_position),
    'file' => 'slideshow_entity.pages.inc',
  );

  $items[$slideshow_entity_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$slideshow_entity_uri . '/delete'] = array(
    'title' => 'Delete slideshow',
    'title callback' => 'slideshow_entity_label',
    'title arguments' => array($slideshow_entity_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('slideshow_entity_delete_form', $slideshow_entity_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'slideshow_entity', $slideshow_entity_uri_argument_position),
    'file' => 'slideshow_entity.admin.inc',
  );

  $items[$slideshow_entity_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('slideshow_entity_form', $slideshow_entity_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'slideshow_entity', $slideshow_entity_uri_argument_position),
    'file' => 'slideshow_entity.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  foreach (slideshow_entity_types() as $type => $info) {
    $items['slideshow/add/' . $type] = array(
      'title' => 'Add slideshow',
      'page callback' => 'slideshow_entity_add',
      'page arguments' => array(2),
      'access callback' => 'entity_access',
      'access arguments' => array('create', 'slideshow_entity', $type),
      'file' => 'slideshow_entity.admin.inc',
    );
  }

  $items['admin/structure/slideshow-types/%slideshow_entity_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('slideshow_entity_type_form_delete_confirm', 4),
    'access arguments' => array('administer slideshow_entity types'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'slideshow_entity.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function slideshow_entity_permission() {
  $permissions = array(
    'administer slideshow_entity types' => array(
      'title' => t('Administer slideshow types'),
      'description' => t('Allows users to configure slideshow types and their fields.'),
      'restrict access' => TRUE,
    ),
    'create slideshow_entity entities' => array(
      'title' => t('Create slideshows'),
      'description' => t('Allows users to create slideshows.'),
      'restrict access' => TRUE,
    ),
    'view slideshow_entity entities' => array(
      'title' => t('View slideshows'),
      'description' => t('Allows users to view slideshows.'),
      'restrict access' => TRUE,
    ),
    'edit any slideshow_entity entities' => array(
      'title' => t('Edit any slideshows'),
      'description' => t('Allows users to edit any slideshows.'),
      'restrict access' => TRUE,
    ),
    'edit own slideshow_entity entities' => array(
      'title' => t('Edit own slideshows'),
      'description' => t('Allows users to edit own slideshows.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}


/**
 * Implements hook_entity_property_info_alter().
 */
function slideshow_entity_entity_property_info_alter(&$info) {
  $properties = &$info['slideshow_entity']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the node was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer nodes',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the node was most recently updated."),
  );
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the slideshow."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer slideshow_entity entities',
    'required' => TRUE,
    'schema field' => 'uid',
  );
}

function slideshow_entity_content_admin() {
  // return 'hi';
  return views_embed_view('slideshows', 'default');
  print_r($d);
  return $d;
}



/**
 * Implements hook_field_formatter().
 * @return [type] [description]
 */
function slideshow_entity_field_formatter_info() {
  return array(
    'slideshow_entity_slideshow' => array(
      'label' => t('Slideshow Entity'),
      'field types' => array('entityreference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function slideshow_entity_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function slideshow_entity_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  // $settings = $display['settings'];
  $summary = t('Render a slideshow entity'); 
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function slideshow_entity_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, &$items, $display) {
  $element = array(); // Initialize the var

  $element[0]['#markup'] = '<h1>Slideshow output (testing)</h1>' . "\n";
  foreach($items as $ss) {
    $ssid = $ss['target_id'];
    $ss_view = views_embed_view('slideshow_display_rev', 'flexslider_block', $ssid);
    $element[0]['#markup'] .= $ss_view;
  }

  return $element;
}


/******************************************************************************
 ****************************** Slideshow API's *******************************
 ******************************************************************************/

/**
 * Access callback for slideshow.
 */
function slideshow_entity_access($op, $slideshow_entity, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer slideshow_entity entities', $account)
          || user_access('create slideshow_entity entities', $account);
    case 'view':
      return user_access('administer slideshow_entity entities', $account)
          || user_access('view slideshow_entity entities', $account);
    case 'edit':
      return user_access('administer slideshow_entity entities')
          || user_access('edit any slideshow_entity entities')
          || (user_access('edit own slideshow_entity entities') && ($slideshow_entity->uid == $account->uid));
  }
}

/**
 * Load a slideshow.
 */
function slideshow_entity_load($ssid, $reset = FALSE) {
  $slideshow_entitys = slideshow_entity_load_multiple(array($ssid), array(), $reset);
  return reset($slideshow_entitys);
}

/**
 * Load multiple slideshows based on certain conditions.
 */
function slideshow_entity_load_multiple($ssids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('slideshow_entity', $ssids, $conditions, $reset);
}

/**
 * Save slideshow.
 */
function slideshow_entity_save($slideshow_entity) {
  entity_save('slideshow_entity', $slideshow_entity);
}

/**
 * Delete single slideshow.
 */
function slideshow_entity_delete($slideshow_entity) {
  entity_delete('slideshow_entity', entity_id('slideshow_entity' ,$slideshow_entity));
}

/**
 * Delete multiple slideshows.
 */
function slideshow_entity_delete_multiple($slideshow_entity_ids) {
  entity_delete_multiple('slideshow_entity', $slideshow_entity_ids);
}


/*******************************************************************************
 ****************************** Slideshow Type API's ********************************
 ******************************************************************************/

/**
 * Access callback for slideshow Type.
 */
function slideshow_entity_type_access($op, $entity = NULL) {
  return user_access('administer slideshow_entity types');
}

/**
 * Load slideshow Type.
 */
function slideshow_entity_type_load($slideshow_entity_type) {
  return slideshow_entity_types($slideshow_entity_type);
}

/**
 * List of slideshow Types.
 */
function slideshow_entity_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('slideshow_entity_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Save slideshow type entity.
 */
function slideshow_entity_type_save($slideshow_entity_type) {
  entity_save('slideshow_entity_type', $slideshow_entity_type);
}

/**
 * Delete single case type.
 */
function slideshow_entity_type_delete($slideshow_entity_type) {
  entity_delete('slideshow_entity_type', entity_id('slideshow_entity_type' ,$slideshow_entity_type));
}

/**
 * Delete multiple case types.
 */
function slideshow_entity_type_delete_multiple($slideshow_entity_type_ids) {
  entity_delete_multiple('slideshow_entity_type', $slideshow_entity_type_ids);
}

/**
  * Implements hook_views_api().
  */
function slideshow_entity_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'slideshow_entity'),
  );
}

function slideshow_entity_admin_paths() {
  $paths = array(
    'slideshow/*/add' => TRUE,
    'slideshow/*/edit' => TRUE,
    'slideshow/*' => TRUE,
  );
  return $paths;
}